{
  "uid" : "f723b5e709c3b86b",
  "name" : "test_three",
  "fullName" : "testCases.test_01.Test_Cases#test_three",
  "historyId" : "78f2c87284584934ea4d06fd687bcfae",
  "time" : {
    "start" : 1621995526814,
    "stop" : 1621995526814,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '192.168.186.128' (timed out)\")",
  "statusTrace" : "self = <pymysql.connections.Connection object at 0x0000018E0F4ABB48>\nsock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n>                               **kwargs)\n\nD:\\python3\\lib\\site-packages\\pymysql\\connections.py:583: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('192.168.186.128', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\nD:\\python3\\lib\\socket.py:727: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('192.168.186.128', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               socket.timeout: timed out\n\nD:\\python3\\lib\\socket.py:716: timeout\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"session\")\n    def method():\n        print(\"测试前\")\n>       link_mysql(\"DELETE FROM users WHERE user_name='wjz';\", \"database.ini\", \"dev\")\n\nconftest.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\db_link.py:21: in link_mysql\n    db=pymysql.connect(host=confdata[0],port=int(confdata[1]),user=confdata[2],password=confdata[3],db=confdata[4])\nD:\\python3\\lib\\site-packages\\pymysql\\__init__.py:94: in Connect\n    return Connection(*args, **kwargs)\nD:\\python3\\lib\\site-packages\\pymysql\\connections.py:325: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000018E0F4ABB48>\nsock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n                                **kwargs)\n                            break\n                        except (OSError, IOError) as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG: print('connected using socket')\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                sock.settimeout(None)\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n            self._sock = sock\n            self._rfile = _makefile(sock, 'rb')\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n                self.commit()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._rfile = None\n            if sock is not None:\n                try:\n                    sock.close()\n                except:  # noqa\n                    pass\n    \n            if isinstance(e, (OSError, IOError, socket.error)):\n                exc = err.OperationalError(\n                        2003,\n                        \"Can't connect to MySQL server on %r (%s)\" % (\n                            self.host, e))\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG: print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '192.168.186.128' (timed out)\")\n\nD:\\python3\\lib\\site-packages\\pymysql\\connections.py:630: OperationalError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "method",
    "time" : {
      "start" : 1621995516617,
      "stop" : 1621995526645,
      "duration" : 10028
    },
    "status" : "broken",
    "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '192.168.186.128' (timed out)\")\n",
    "statusTrace" : "  File \"D:\\python3\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\python3\\lib\\site-packages\\_pytest\\fixtures.py\", line 1117, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\python3\\lib\\site-packages\\_pytest\\fixtures.py\", line 915, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\PycharmProjects\\pytest_automation\\conftest.py\", line 8, in method\n    link_mysql(\"DELETE FROM users WHERE user_name='wjz';\", \"database.ini\", \"dev\")\n  File \"D:\\PycharmProjects\\pytest_automation\\common\\db_link.py\", line 21, in link_mysql\n    db=pymysql.connect(host=confdata[0],port=int(confdata[1]),user=confdata[2],password=confdata[3],db=confdata[4])\n  File \"D:\\python3\\lib\\site-packages\\pymysql\\__init__.py\", line 94, in Connect\n    return Connection(*args, **kwargs)\n  File \"D:\\python3\\lib\\site-packages\\pymysql\\connections.py\", line 325, in __init__\n    self.connect()\n  File \"D:\\python3\\lib\\site-packages\\pymysql\\connections.py\", line 630, in connect\n    raise exc\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试商品"
  }, {
    "name" : "tag",
    "value" : "smoking"
  }, {
    "name" : "parentSuite",
    "value" : "testCases"
  }, {
    "name" : "suite",
    "value" : "test_01"
  }, {
    "name" : "subSuite",
    "value" : "Test_Cases"
  }, {
    "name" : "host",
    "value" : "DESKTOP-V2BND0M"
  }, {
    "name" : "thread",
    "value" : "17776-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCases.test_01"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7eaf28cc155a05c7",
      "status" : "passed",
      "time" : {
        "start" : 1617174446844,
        "stop" : 1617174446844,
        "duration" : 0
      }
    }, {
      "uid" : "43faecf91944b5d",
      "status" : "passed",
      "time" : {
        "start" : 1617174402052,
        "stop" : 1617174402052,
        "duration" : 0
      }
    }, {
      "uid" : "bf9eff7159dcdce7",
      "status" : "broken",
      "statusDetails" : "_pytest.fixtures.FixtureLookupError: ('method1', <FixtureRequest for <Function test_three>>)",
      "time" : {
        "start" : 1617174348718,
        "stop" : 1617174348718,
        "duration" : 0
      }
    }, {
      "uid" : "850434a4308a2efc",
      "status" : "broken",
      "statusDetails" : "_pytest.fixtures.FixtureLookupError: ('method1', <FixtureRequest for <Function test_three>>)",
      "time" : {
        "start" : 1617174138022,
        "stop" : 1617174138022,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "smoking" ]
  },
  "source" : "f723b5e709c3b86b.json",
  "parameterValues" : [ ]
}